
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

# Nest Integration
nest:
  client_id: !secret nest_client_id
  client_secret: !secret nest_client_secret
  # "Project ID" in the Device Access Console (not Cloud Project ID!)
  project_id: !secret nest_project_id
  
# Google Calendar
google:
  client_id: !secret calendar_client_id
  client_secret: !secret calendar_client_secret
  
# Amazon Account
alexa_media:
  accounts:
   email: !secret amazon_email
   password: !secret amazon_password
   url: amazon.com
   
# Opensky (Flight Tracker)
sensor:
  - platform: opensky
    radius: 5
# Thermostat Goal
  - platform: template
    sensors:
      goal_temp:
        value_template: '{{ state_attr("climate.thermostat","temperature")|int }}'
# Dining Temp
  - platform: template
    sensors:
      dining_temp:
        value_template: '{{ state_attr("climate.thermostat","current_temperature")|int }}'
# Average Temp
  - platform: template
    sensors:
      average_temp:
        value_template: "{{ ((float(states('sensor.kitchen_temp')) + float(states('sensor.balcony_temp')) + float(states('sensor.dining_temp'))) / 3) | round(2) }}"
# Average Inside Temp
  - platform: template
    sensors:
      average_inside_temp:
        value_template: "{{ ((float(states('sensor.kitchen_temp')) + float(states('sensor.dining_temp'))) / 2) | round(2) }}"
# Thermostat Low
  - platform: template
    sensors:
      low_temp:
        value_template: '{{ state_attr("climate.thermostat","target_temp_low")|int }}'
# Thermostat High
  - platform: template
    sensors:
      high_temp:
        value_template: '{{ state_attr("climate.thermostat","target_temp_high")|int }}'     
# Temperature
  - platform: template
    sensors:
      weather_temperature:
        friendly_name: "Temp"
        unit_of_measurement: 'degrees'
        value_template: "{{ state_attr('weather.home', 'temperature') }}"
# Sunrise/Sunset
  - platform: template
    sensors:
      nextsunrise:
        entity_id: sun.sun
        friendly_name: 'Next Sunrise'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom(' %I:%M %p') | replace(" 0", "") }}
        icon_template: mdi:weather-sunset-up
      nextsunset:
        entity_id: sun.sun
        friendly_name: 'Next Sunset'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom(' %I:%M %p') | replace(" 0", "") }}
        icon_template: mdi:weather-sunset-down 
# Event Tomorrow
  - platform: template
    sensors:
      event_tomorrow:
        entity_id:
          - calendar.building4unit906_gmail_com
          - sensor.time
        friendly_name: "Event Tomorrow"
        value_template: >
          {% set e = strptime(
               states.calendar.building4unit906_gmail_com.attributes.start_time,
               '%Y-%m-%d %H:%M:%S') %}
          {{ e.strftime('%j')|int - now().strftime('%j')|int == 1 }}
# Event Today
  - platform: template
    sensors:
      event_today:
        entity_id:
          - calendar.building4unit906_gmail_com
          - sensor.time
        friendly_name: "Event Today"
        value_template: >
          {% set e = strptime(
               states.calendar.building4unit906_gmail_com.attributes.start_time,
               '%Y-%m-%d %H:%M:%S') %}
          {{ e.strftime('%j')|int - now().strftime('%j')|int == 0 }}
#Event This Week
  - platform: template
    sensors:
      event_this_week:
        entity_id:
          - calendar.building4unit906_gmail_com
          - sensor.time
        friendly_name: "Event This Week"
        value_template: >
          {% set e = strptime(
               states.calendar.building4unit906_gmail_com.attributes.start_time,
               '%Y-%m-%d %H:%M:%S') %}
          {{ e.strftime('%j')|int - now().strftime('%j')|int <= 7 }}
#Time
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
# 12 Hour time
  - platform: template
    sensors:
      timenew:
        friendly_name: 'XTime'
        value_template: >
          {% set time = states('sensor.time') %}
          {% set hour = time[:2]|int %}
          {{ '{:2d}:{} {}'.format(hour if hour == 12 else hour % 12, time[3:5], '' if hour>11 else '') }}

# Day
  - platform: template
    sensors:
      day:
        friendly_name: 'Day'
        value_template: "{{ as_timestamp(states('sensor.date')) | timestamp_custom('%A') }}"

# Month
  - platform: template
    sensors:
      month:
        friendly_name: 'month'
        value_template: "{{ as_timestamp(states('sensor.date')) | timestamp_custom('%B %d') }}"
          
# TP-Link Router
#  - platform: tplink_router
#    host: 192.168.1.98
#    username: !secret tp-link_username
#    password: !secret tp-link_password

# Example configuration.yaml entry
#device_tracker:
#  - platform: tplink_router
#    host: 192.168.1.98
#    username: !secret tp-link_username
#    password: !secret tp-link_password

# Octoprint
octoprint:
  host: !secret octoprint_host
  api_key: !secret octoprint_api_key
  number_of_tools: 1
  bed: true
  sensors:
    monitored_conditions:
      - 'Current State'
      - 'Temperatures'
      - 'Job Percentage'
      - 'Time Elapsed'
      - 'Time Remaining'

camera:
  - platform: mjpeg
    name: OctoPrint
    still_image_url: !secret octoprint_still_image_url
    mjpeg_url: !secret octoprint_mjpeg_url
    
# Jeremy Sleep Threshold
binary_sensor:
  - platform: threshold
    entity_id: sensor.pixel_3_sleep_confidence
    upper: 60
    name: jeremy_sleeping
    
# Android IP Webcam
android_ip_webcam:
  - host: !secret ip
    port: 8080
    sensors:
      - light
      
# Kitty Litter Webcam

#  - host: !secret ip2
#    port: 8080
#    sensors:
#      - audio_connections
#      - battery_level
#      - battery_temp
#      - battery_voltage
#      - light
#      - motion
#      - pressure
#      - proximity
#      - sound
#      - video_connections
#    switches:
#      - motion_detect


# Balcony Fan Light
#fan:
#    - platform: mqtt
#      name: "Balcony Fan"
#      command_topic: "cmnd/Balcony_Fan/FanSpeed"
#      state_topic: "stat/Balcony_Fan/RESULT"
#      state_value_template: >
#        {% if value_json.FanSpeed > 0 -%}1{% else -%}0{%- endif %}
#      payload_off: "0"
#      payload_on: "1"
#      percentage_command_topic: "cmnd/Balcony_Fan/FanSpeed"
#      percentage_state_topic: "stat/Balcony_Fan/RESULT"
#      percentage_value_template: "{{ value_json.FanSpeed }}"
#      speed_range_min:  1
#      speed_range_max: 3
#      availability_topic: tele/Balcony_Fan/LWT
#      payload_available: Online
#      payload_not_available: Offline
#light:
#    - platform: mqtt
#      name: "Balcony Fan Light"
#      command_topic: "cmnd/Balcony_Fan/power1"
#      state_topic: "stat/Balcony_Fan/POWER1"
#      qos: 1
#      payload_on: "ON"
#      payload_off: "OFF"
#      retain: false

#fan:
#  - platform: mqtt
#    name: "Balcony Fan"
#    command_topic: "cmnd/iFan03-2/FanSpeed"
#    state_topic: "stat/iFan03-2/RESULT"
#    state_value_template: >
#      {% if value_json.FanSpeed is defined %}
#        {% if value_json.FanSpeed == 0 -%}off{%- elif value_json.FanSpeed > 0 -%}on{%- endif %}
#      {% else %}
#        {% if states.fan.balcony_fan.state == 'off' -%}off{%- elif states.fan.balcony_fan.state == 'on' -%}on{%- endif %}
#      {% endif %}
#    availability_topic: tele/iFan03-2/LWT
#    payload_off: "off"
#    payload_on: "on"
#    payload_available: Online
#    payload_not_available: Offline
#    percentage_command_template: >
#      {% if value == 33 %}
#        1
#      {% elif value == 66 %}
#        2
#      {% elif value == 100 %}
#        3
#      {% else %}
#        0 
#      {% endif %}
#    percentage_command_topic: "cmnd/iFan03-2/FanSpeed"
#    percentage_state_topic: "stat/iFan03-2/RESULT"
#    percentage_value_template: >
#      {% if value_json.FanSpeed == 1 %}
#        33
#      {% elif value_json.FanSpeed == 2 %}
#        66
#      {% elif value_json.FanSpeed == 3 %}
#        100
#      {% else %}
#        0 
#      {% endif %}

# Time



